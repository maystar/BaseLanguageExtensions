package jetbrains.mps.baseLanguage.tailRecursion.generator.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.internal.collections.runtime.StopIteratingException;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class GenHelper {
  public GenHelper() {
  }

  public static void checkPathForIncorrectNodes(TemplateQueryContext genContext, final SNode lastNode, SNode methodCall) {
    if (SNodeOperations.isInstanceOf(lastNode, "jetbrains.mps.baseLanguage.structure.ReturnStatement")) {
      if (SLinkOperations.getTarget(SNodeOperations.cast(lastNode, "jetbrains.mps.baseLanguage.structure.ReturnStatement"), "expression", true) != methodCall) {
        genContext.showErrorMessage(methodCall, "The method call is not in a tail position");
      }
    } else if (SNodeOperations.isInstanceOf(lastNode, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      if (SLinkOperations.getTarget(SNodeOperations.cast(lastNode, "jetbrains.mps.baseLanguage.structure.ExpressionStatement"), "expression", true) != methodCall) {
        genContext.showErrorMessage(methodCall, "The method call is not in a tail position");
      }
    } else {
      Iterable<SNode> predecesors = ListSequence.fromList(SNodeOperations.getAncestors(methodCall, null, false)).translate(new ITranslator2<SNode, SNode>() {
        public Iterable<SNode> translate(final SNode it) {
          return new Iterable<SNode>() {
            public Iterator<SNode> iterator() {
              return new YieldingIterator<SNode>() {
                private int __CP__ = 0;

                protected boolean moveToNext() {
__loop__:
                  do {
__switch__:
                    switch (this.__CP__) {
                      case -1:
                        assert false : "Internal error";
                        return false;
                      case 4:
                        if (it == lastNode) {
                          this.__CP__ = 5;
                          break;
                        }
                        this.__CP__ = 6;
                        break;
                      case 3:
                        if (false) {
                          this.__CP__ = 2;
                          break;
                        }
                        this.__CP__ = 1;
                        break;
                      case 6:
                        this.__CP__ = 3;
                        this.yield(it);
                        return true;
                      case 0:
                        this.__CP__ = 2;
                        break;
                      case 2:
                        this.__CP__ = 4;
                        break;
                      case 5:
                        throw new StopIteratingException();
                      default:
                        break __loop__;
                    }
                  } while (true);
                  return false;
                }
              };
            }
          };
        }
      });
      if (Sequence.fromIterable(predecesors).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.TryCatchStatement") || SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.TryStatement") || SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement");
        }
      })) {
        genContext.showErrorMessage(methodCall, "The method call is not in a tail position");
      }
      checkLastNodeBeingOfCorrectKind(genContext, SNodeOperations.getParent(methodCall));
    }
  }

  public static boolean checkMethodCallInvokesCorrectMethod(SNode method, TemplateQueryContext genContext, SNode methodCall) {
    if (SLinkOperations.getTarget(methodCall, "baseMethodDeclaration", false) != method) {
      genContext.showErrorMessage(methodCall, "The method call is not in a tail position");
      return true;
    }
    return false;
  }

  public static boolean checkLastNodeBeingOfCorrectKind(TemplateQueryContext genContext, SNode lastNode) {
    if (!(SNodeOperations.isInstanceOf(lastNode, "jetbrains.mps.baseLanguage.structure.ReturnStatement")) && !(SNodeOperations.isInstanceOf(lastNode, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")) && !(SNodeOperations.isInstanceOf(lastNode, "jetbrains.mps.baseLanguage.structure.IfStatement"))) {
      genContext.showErrorMessage(lastNode, "The method call is not in a tail position");
      return true;
    }
    return false;
  }

  public static void handleParameter(SNode originalFunctionDefinition, SNode containingStatementList, SNode parameterCopyBlock, final SNode param, SNode currentInvocationParameter, TemplateQueryContext genContext) {

    SNode varDeclaration = _quotation_createNode_bzcigv_a0b0e(SNodeOperations.copyNode(SLinkOperations.getTarget(param, "type", true)), genContext.createUniqueName("localParam", null), param);
    ListSequence.fromList(SLinkOperations.getTargets(parameterCopyBlock, "statement", true)).addElement(varDeclaration);

    final SNode varRef = _quotation_createNode_bzcigv_a0e0e(SLinkOperations.getTarget(varDeclaration, "localVariableDeclaration", true));

    SNode assignment = _quotation_createNode_bzcigv_a0g0e(varRef, currentInvocationParameter);
    ListSequence.fromList(SLinkOperations.getTargets(containingStatementList, "statement", true)).addElement(_quotation_createNode_bzcigv_a0a7a4(assignment));

    ListSequence.fromList(SNodeOperations.getDescendants(originalFunctionDefinition, "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
      }
    }).toListSequence().where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "variableDeclaration", false) == param;
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNodeOperations.replaceWithAnother(it, SNodeOperations.copyNode(varRef));
      }
    });
  }

  public static void removeTailStatement(SNode functionInvocation) {
    SNode returnStatement = SNodeOperations.getAncestor(functionInvocation, "jetbrains.mps.baseLanguage.structure.ReturnStatement", false, false);
    if (returnStatement == null) {
      SNode expressionStatement = SNodeOperations.getAncestor(functionInvocation, "jetbrains.mps.baseLanguage.structure.ExpressionStatement", false, false);
      SNodeOperations.deleteNode(expressionStatement);
    } else {
      SNodeOperations.deleteNode(returnStatement);
    }
  }

  public static SNode wrapInLoop(SNode functionBody, SNode parameterCopyBlock) {
    SNode body = _quotation_createNode_bzcigv_a0a0g(functionBody);
    final SNode loopNode = ListSequence.fromList(SLinkOperations.getTargets(body, "statement", true)).first();
    ListSequence.fromList(SLinkOperations.getTargets(parameterCopyBlock, "statement", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNodeOperations.insertPrevSiblingChild(loopNode, SNodeOperations.detachNode(it));
      }
    });
    return body;
  }

  private static SNode _quotation_createNode_bzcigv_a0b0e(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_5, "name", (String) parameter_2);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild("type", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_7, "variableDeclaration", (SNode) parameter_3);
    quotedNode_5.addChild("initializer", quotedNode_7);
    quotedNode_4.addChild("localVariableDeclaration", quotedNode_5);
    return quotedNode_4;
  }

  private static SNode _quotation_createNode_bzcigv_a0e0e(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "variableDeclaration", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_bzcigv_a0g0e(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("lValue", HUtil.copyIfNecessary(quotedNode_4));
    }
    quotedNode_5 = (SNode) parameter_2;
    if (quotedNode_5 != null) {
      quotedNode_3.addChild("rValue", HUtil.copyIfNecessary(quotedNode_5));
    }
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_bzcigv_a0a7a4(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_bzcigv_a0a0g(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.WhileStatement", null, null, false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_4, "value", "true");
    quotedNode_3.addChild("condition", quotedNode_4);
    quotedNode_5 = (SNode) parameter_1;
    if (quotedNode_5 != null) {
      quotedNode_3.addChild("body", HUtil.copyIfNecessary(quotedNode_5));
    }
    quotedNode_2.addChild("statement", quotedNode_3);
    return quotedNode_2;
  }
}
